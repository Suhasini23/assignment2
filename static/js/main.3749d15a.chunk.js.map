{"version":3,"sources":["assets/active.svg","assets/disabledImg.svg","Comman/Contants.ts","Comman/__commanStyles.ts","Comman/common.ts","Comman/commanUtils/fonts.ts","Comman/commanUtils/color.ts","designFrameworks/Button/constants.ts","Components/Header/Header.tsx","Components/Header/__style.ts","designFrameworks/Button/styles.tsx","Container/MainLayout/MainLayout.tsx","designFrameworks/Button/index.tsx","Container/ButtonLayout/ButtonLayout.tsx","Container/ButtonLayout/__style.ts","Container/MainLayout/__style.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BUTTON_VARIENT","BUTTON_SIZE","BUTTON_COLOR","__container","marginRight","marginLeft","paddingLeft","paddingRight","width","__afterBefore","display","content","clear","fonts","bodyFont","thinFont","boldFont","blackFont","mediumFont","lightFont","colors","errorRed","fadedGrey","white","blue","fadedBlack","primaryColor","whiteTen","blackThree","lightGrey40","pink","purple","teal","grey","cream","black","extremeBlack","yellow","lineSeparatorColor","ApplicationContants","getVarientColorStyle","varient","color","size","disabled","displayDisableStyle","shadow","mapKey","length","text","primary","backgroundColor","boxShadow","default","dark","contained","backgroundImage","opacity","outlined","border","VARIENT_COLOR_MAP","styled","div","commanStyles","button","props","background","outline","img","p","lineHeight","justifyContent","fontSize","fontFamily","commonButtonStyle","roundedStyle","rounded","isDisabled","varientStyle","sizeStyle","borderColor","sm","padding","md","lg","borderRadius","marginBottom","fontWeight","textAlign","whiteSpace","verticalAlign","touchAction","cursor","userSelect","MainLayout","customStyle","flexDirection","margin","alignItems","flexWrap","height","isDark","transition","useState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3749d15a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/active.5ea8519c.svg\";","module.exports = __webpack_public_path__ + \"static/media/disabledImg.42fafb33.svg\";","import colors from './commanUtils/color';\n\nexport const ApplicationContants = {\n    LIGHT: \"LIGHT\",\n    DARK: \"DARK\"\n}\nexport const data = {\n    data1: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis vitae volutpat erat. Maecenas a eleifend massa, at varius turpis. Duis metus turpis, porttitor id mi nec, pharetra iaculis tortor. Donec nunc nisl, dignissim efficitur ornare eu, mollis et quam. Quisque nunc metus, pretium nec efficitur ut, venenatis vitae odio. Donec gravida turpis id rutrum aliquam. Mauris vitae scelerisque orci, eget sagittis sem. Proin et mauris luctus risus pretium suscipit nec vitae sapien. Donec finibus eu mauris at dapibus. Duis vulputate, eros quis sagittis euismod, ante massa ullamcorper ante, et dapibus felis velit id nibh. Cras at mi eu urna scelerisque porta. Fusce dolor ante, feugiat ac mi et, dapibus finibus turpis.\"\n}\n\nexport enum BUTTON_VARIENT {\n    text = \"text\",\n    contained = \"contained\",\n    outlined = \"outlined\",\n    default = \"default\"\n}\n\nexport enum BUTTON_SIZE {\n    sm = \"small\",\n    md = \"medium\",\n    lg = \"large\"\n}\n\nexport enum BUTTON_COLOR {\n    primary = \"primary\",\n    default = \"default\",\n    dark = \"dark\"\n}\n// @ts-ignore\nconst VARIENT_COLOR_MAP = (mapKey: any, { disabled, shadow }) => {\n    switch (mapKey) {\n        case `${BUTTON_VARIENT.text}${BUTTON_COLOR.primary}`:\n            return {\n                color: disabled ? colors.fadedGrey : colors.primaryColor,\n                backgroundColor: colors.white,\n                boxShadow: `0 3px 16px 0 ${colors.lineSeparatorColor}`\n            };\n        /* Styles applied to the element if `varient=\"text\"` and `color=\"default\"`. */\n        case `${BUTTON_VARIENT.text}${BUTTON_COLOR.default}`:\n            return {\n                color: colors.grey\n            };\n        /* Styles applied to the element if `varient=\"text\"` and `color=\"dark\"`. */\n        case `${BUTTON_VARIENT.text}${BUTTON_COLOR.dark}`:\n            return {\n                color: colors.black\n            };\n        /* Styles applied to the element if `varient=\"contained\"` and `color=\"primary\"`. */\n        case `${BUTTON_VARIENT.contained}${BUTTON_COLOR.primary}`:\n            return {\n                color: colors.white,\n                backgroundImage: `linear-gradient(99deg, ${colors.extremeBlack}, ${colors.primaryColor})`,\n                opacity: disabled ? 0.75 : 1\n            };\n        /* Styles applied to the element if `varient=\"contained\"` and `color=\"default\"`. */\n        case `${BUTTON_VARIENT.contained}${BUTTON_COLOR.default}`:\n            return {\n                backgroundColor: colors.white,\n                boxShadow: `0 3px 16px 0 ${colors.fadedBlack}`\n            };\n        /* Styles applied to the element if `varient=\"contained\"` and `color=\"dark\"`. */\n        case `${BUTTON_VARIENT.contained}${BUTTON_COLOR.dark}`:\n            return {\n                color: colors.white,\n                backgroundImage: \"none\",\n                backgroundColor: colors.black,\n                boxShadow: \"0 3px 16px 0 rgba(0, 0, 0, 0.2)\"\n            };\n        /* Styles applied to the element if `varient=\"outlined\"` and `color=\"primary\"`. */\n        case `${BUTTON_VARIENT.outlined}${BUTTON_COLOR.primary}`:\n            return {\n                color: colors.extremeBlack,\n                border: `1px solid ${colors.primaryColor}`\n            };\n        /* Styles applied to the element if `varient=\"outlined\"` and `color=\"default\"`. */\n        case `${BUTTON_VARIENT.outlined}${BUTTON_COLOR.default}`:\n            return {\n                color: colors.blackThree,\n                border: `1px solid ${colors.lightGrey40}`,\n                ...(shadow\n                    ? { boxShadow: `0 3px 16px 0 ${colors.lightGrey40}` }\n                    : {})\n            };\n        /* Styles applied to the element if `varient=\"outlined\"` and `color=\"dark\"`. */\n        case `${BUTTON_VARIENT.outlined}${BUTTON_COLOR.dark}`:\n            return {\n                color: colors.black,\n                border: `1px solid ${colors.black}`\n            };\n        default:\n            return {};\n    }\n};\n\nexport const getVarientColorStyle = ({\n    // @ts-ignore\n    varient,\n    // @ts-ignore      \n    size,\n    // @ts-ignore     \n    color,\n    // @ts-ignore              \n    disabled,\n    // @ts-ignore               \n    displayDisableStyle,\n    // @ts-ignore           \n    shadow\n}) => {\n    const mapKey = `${varient}${color}`;\n\n    if (!mapKey || !mapKey.length) {\n        return {};\n    }\n\n    return VARIENT_COLOR_MAP(mapKey, {\n        disabled: disabled || displayDisableStyle,\n        shadow\n    });\n};\n","import { gutterWidthSm, gutterWidthMd } from \"./common\";\n\nexport const __container = () => ({\n  marginRight: \"auto\",\n  marginLeft: \"auto\",\n  paddingLeft: gutterWidthSm,\n  paddingRight: gutterWidthSm,\n  \"@media (min-width:768px)\": {\n    width: \"720px\",\n    paddingLeft: gutterWidthMd,\n    paddingRight: gutterWidthMd\n  },\n  \"@media (min-width:992px)\": {\n    width: \"944px\"\n  },\n  \"@media (min-width:1300px)\": {\n    width: \"1252px\"\n  },\n  ...__afterBefore\n});\n\nconst __afterBefore = () => ({\n  \"&:after\": {\n    display: \"table\",\n    content: \"' '\",\n    clear: \"both\"\n  },\n  \"&:before\": {\n    display: \"table\",\n    content: \"' '\"\n  }\n});","export const titleFs = \"22px\";\nexport const subTitleFs = \"15px\";\nexport const accountFont = \"26px\";\nexport const mobileTitleFs = \"20px\";\nexport const mobileSubTitleFs = \"14px\";\nexport const mobileAccountFont = \"18px\";\nexport const productTitleFs = \"16px\";\nexport const priceRowMobileFs = \"14px\";\nexport const mobileSmallText = \"12px\";\nexport const footerHeight = \"50px\";\nexport const paddingDesktop = \"24px\";\nexport const mobileHeaderHeightWithTab = \"89px\";\nexport const mobileHeaderHeightWithoutTab = \"50px\";\nexport const gutterWidthMd = \"24px\";\nexport const gutterWidthSm = \"16px\";\nexport const halfGutterWidthSm = \"8px\";","const fonts = {\n    bodyFont:\n      \"BrandonTextWeb-Regular,Helvetica Neue, Helvetica, Roboto, Arial, sans-serif\",\n    thinFont:\n      \"BrandonTextWeb-Thin, Helvetica Neue, Helvetica, Roboto, Arial, sans-serif\",\n    boldFont:\n      \"BrandonTextWeb-Bold,Helvetica Neue, Helvetica, Roboto, Arial,sans-serif\",\n    blackFont:\n      \"BrandonTextWeb-Black,Helvetica Neue, Helvetica, Roboto, Arial, sans-serif\",\n    mediumFont:\n      \"BrandonTextWeb-Medium,Helvetica Neue, Helvetica, Roboto, Arial, sans-serif\",\n    lightFont:\n      \"BrandonTextWeb-Light,Helvetica Neue,Helvetica, Roboto, Arial, sans-serif\"\n  };\n  \n  export default fonts;\n  ","const colors = {\n    errorRed: \"#d83636\",\n    fadedGrey: \"#a9a9a9\",\n    white: \"#ffffff\",\n    blue: \"#0000ff\",\n    fadedBlack: \"#2f2c2c\",\n    primaryColor: \"#ff3278\",\n    whiteTen: \"#d8d8d8\",\n    blackThree: \"#4A4A4A\",\n    lightGrey40: \"rgba(0, 0, 0, 0.4)\",\n    pink: \"#fd6e72\",\n    purple: \"#745260\",\n    teal: \"#abe7db\",\n    grey: \"#74919f\",\n    cream: \"#fdf9de\",\n    black: \"#333333\",\n    extremeBlack: \"#000\",\n    yellow: \"#FFFF00\",\n    lineSeparatorColor: \"#d8d8d8\",\n\n}\nexport default colors;","export enum BUTTON_VARIENT {\n    text = \"text\",\n    contained = \"contained\",\n    outlined = \"outlined\",\n    default = \"default\"\n  }\n  \n  export enum BUTTON_COLOR {\n    primary = \"primary\",\n    default = \"default\",\n    dark = \"dark\"\n  }\n  ","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport active from \"../../assets/active.svg\";\nimport disabledImg from \"../../assets/disabledImg.svg\";\nimport * as commanStyles from \"../../Comman/__commanStyles\"\nimport * as style from \"./__style\"\nimport { data } from '../../Comman/Contants';\n\nconst ContainerWrapper = styled.div(commanStyles.__container);\n// @ts-ignore \nconst ButtonStyle = styled.button(style.__buttonStyle);\nconst ParaDiv = styled.p(style.__para);\nconst HeaderDiv = styled.div(style.__header);\n\n\ninterface IComponentProps {\n    themeToggler: () => void;\n    isDark: boolean\n}\nconst Header: React.FC<IComponentProps> = props => {\n    const { themeToggler, isDark } = props;\n    const imgUrl = isDark ? active : disabledImg;\n    return (\n        // @ts-ignore\n        <ContainerWrapper>\n            <HeaderDiv>\n                <p>React Button component with a toggle button for light and dark theme.</p>\n                <ButtonStyle onClick={themeToggler}>\n                    <img src={imgUrl} />\n                </ButtonStyle>\n            </HeaderDiv>\n\n            <ParaDiv>\n                {data.data1}\n            </ParaDiv>\n        </ContainerWrapper>\n\n    )\n};\nexport default Header;","import fonts from \"../../Comman/commanUtils/fonts\";\nimport colors from \"../../Comman/commanUtils/color\";\n\n\nexport const __buttonStyle = (props: any) => ({\n    border: \"unset\",\n    background: \"unset\",\n    outline: \"unset\",\n    img: {\n        width: \"70px\"\n    }\n});\n\n\nexport const __header = (props: any) => ({\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    fontSize: \"33px\",\n    p: {\n        fontFamily: fonts.boldFont\n    }\n});\n\nexport const __para = (props: any) => ({\n    lineHeight: \"28px\"\n});\n\n\n","import { BUTTON_VARIENT, getVarientColorStyle, BUTTON_SIZE } from '../../Comman/Contants';\nimport colors from '../../Comman/commanUtils/color';\n\nexport const __button = (props = {}) => ({\n    // @ts-ignore\n    ...commonButtonStyle(props),\n    // @ts-ignore\n    ...getVarientColorStyle(props),\n    // @ts-ignore\n    ...(props.shadow ? {} : { boxShadow: \"none\" }),\n    // @ts-ignore\n    ...props.customStyle\n});\n\nconst commonButtonStyle = ({\n    // @ts-ignore\n    varient,\n    // @ts-ignore      \n    size,\n    // @ts-ignore     \n    color,\n    // @ts-ignore              \n    disabled,\n    // @ts-ignore               \n    displayDisableStyle,\n    // @ts-ignore           \n    shadow,\n    // @ts-ignore   \n    rounded\n}) => {\n    const isDisabled = disabled || displayDisableStyle;\n\n    let buttonBaseStyle = {},\n        varientStyle = {},\n        roundedStyle = {},\n        sizeStyle = {}\n\n    switch (varient) {\n        case BUTTON_VARIENT.text:\n            varientStyle = {\n                backgroundColor: colors.white\n            };\n            break;\n        case BUTTON_VARIENT.contained:\n            varientStyle = {\n                color: colors.white,\n                backgroundImage: `linear-gradient(99deg, ${colors.primaryColor}, ${colors.white})`,\n                boxShadow: \"0 3px 16px 0 rgba(247, 123, 155, 0.71)\"\n            };\n            break;\n        case BUTTON_VARIENT.outlined:\n            varientStyle = {\n                border: `1px solid ${colors.fadedGrey}`,\n                backgroundColor: colors.white\n            };\n            break;\n        default:\n            varientStyle = {\n                backgroundColor: colors.white,\n                borderColor: \"#ccc\"\n            };\n            break;\n    }\n\n\n    switch (size) {\n        case BUTTON_SIZE.sm:\n            sizeStyle = {\n                padding: \"10px\",\n                width: \"fit-content\"\n            };\n            break;\n        case BUTTON_SIZE.md:\n            sizeStyle = {\n                padding: \"10px 7px\",\n                width: \"fit-content\"\n            };\n            break;\n        case BUTTON_SIZE.lg:\n            sizeStyle = {\n                width: \"fit-content\",\n                padding: \"15px 30px\"\n            };\n            break;\n        default:\n            sizeStyle = {\n                padding: \"2px\"\n            };\n            break;\n    }\n\n    roundedStyle = {\n        padding: \"6px 24px\",\n        borderRadius: \"30px\"\n    };\n\n    buttonBaseStyle = {\n        display: \"inline-block\",\n        marginBottom: \"0\",\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"middle\",\n        touchAction: \"manipulation\",\n        cursor: isDisabled ? \"default\" : \"pointer\",\n        backgroundImage: \"none\",\n        border: \"1px solid transparent\",\n        padding: \"6px 12px\",\n        fontSize: \"16px\",\n        outline: \"none\",\n        lineHeight: \"1.42857143\",\n        userSelect: \"none\",\n        ...(rounded ? roundedStyle : {}),\n        ...varientStyle,\n        ...sizeStyle\n    };\n\n    return buttonBaseStyle;\n};\n","import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport Header from \"../../Components/Header/Header\";\nimport *  as style from \"./__style\";\nimport { ApplicationContants } from \"../../Comman/Contants\";\nimport ButtonLayout from '../ButtonLayout/ButtonLayout';\nconst ThemeWrapper = styled.div(style.__themeSetter);\n\ninterface IComponentProps {\n}\nconst MainLayout: React.FC<IComponentProps> = props => {\n    const [appTheme, setAppTheme] = useState(ApplicationContants.LIGHT);\n    const [isDark, setIsDark] = useState(false);\n    const handleToggle = () => {\n        const theme = appTheme === ApplicationContants.LIGHT ? ApplicationContants.DARK : ApplicationContants.LIGHT\n        setAppTheme(theme);\n        setIsDark(!isDark)\n    }\n    return (\n        // @ts-ignore\n        <>\n            <ThemeWrapper isDark={isDark}>\n                <Header themeToggler={handleToggle} isDark={isDark} />\n                <ButtonLayout />\n            </ThemeWrapper>\n        </>\n\n    )\n};\nexport default MainLayout;","import styled from \"@emotion/styled\";\nimport * as React from \"react\";\nimport { BUTTON_COLOR, BUTTON_VARIENT } from \"./constants\";\nimport { __button } from \"./styles\";\nimport { IButton } from \"../../Comman/GenericInterface\";\nimport { BUTTON_SIZE } from '../../Comman/Contants';\n\nconst Button = styled.button<IButton>(__button);\n\nconst ButtonWrapper: React.FC<IButton> = props => {\n    const {\n        children,\n        onClick,\n        disabled,\n        displayDisableStyle = false,\n        varient = BUTTON_VARIENT.default,\n        color = BUTTON_COLOR.default,\n        customStyle = {},\n        rounded = false,\n        shadow = true,\n        stopPropagation = false,\n        preventDefault = true,\n        size = BUTTON_SIZE.sm\n    } = props,\n        onButtonClick = (e: React.MouseEvent) => {\n            preventDefault && e.preventDefault();\n            stopPropagation && e.stopPropagation();\n            onClick && !disabled && onClick(e);\n        };\n\n    return (\n        <Button\n            varient={varient}\n            color={color}\n            customStyle={customStyle}\n            disabled={disabled}\n            onClick={onButtonClick}\n            rounded={rounded}\n            shadow={shadow}\n            displayDisableStyle={displayDisableStyle}\n            size={size}\n        >\n            {children}\n        </Button>\n    );\n};\n\nexport default ButtonWrapper;\nexport { BUTTON_COLOR, BUTTON_VARIENT } from \"./constants\";\n","import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { ApplicationContants, BUTTON_SIZE, BUTTON_COLOR } from \"../../Comman/Contants\";\nimport { Button } from '../../designFrameworks/comman';\nimport * as commanStyles from \"../../Comman/__commanStyles\"\nimport { BUTTON_VARIENT } from '../../designFrameworks/Button';\nimport * as style from './__style';\n// @ts-ignore \nconst ButtonWrapperDiv = styled.div(style.__buttonWrapper);\n// @ts-ignore \nconst WrapperDiv = styled.div(style.__wrapper);\nconst ContainerWrapper = styled.div(commanStyles.__container);\ninterface IComponentProps {\n}\nconst ButtonLayout: React.FC<IComponentProps> = props => {\n    const handleOnClick = () => {\n        window.alert(\"you click on me!!!\")\n    }\n    return (\n        <ContainerWrapper>\n            <h2> Button varients</h2>\n            <WrapperDiv>\n                <ButtonWrapperDiv>\n                    <Button\n                        size={BUTTON_SIZE.lg}\n                        color={BUTTON_COLOR.primary}\n                        rounded={true}\n                        varient={BUTTON_VARIENT.contained}\n                    >\n                        <div> type 1  </div>\n                    </Button>\n                    <p>This button is with large size, and primaryColor and other props</p>\n                </ButtonWrapperDiv>\n                <ButtonWrapperDiv>\n                    <Button\n                        size={BUTTON_SIZE.md}\n                        color={BUTTON_COLOR.default}\n                        varient={BUTTON_VARIENT.text}\n                    >\n                        <div> type 2 </div>\n                    </Button>\n                    <p>This button is with medium size, and default color and other props</p>\n                </ButtonWrapperDiv>\n                <ButtonWrapperDiv>\n                    <Button\n                        size={BUTTON_SIZE.sm}\n                        color={BUTTON_COLOR.primary}\n                        rounded={true}\n                        varient={BUTTON_VARIENT.text}\n                    >\n                        <div> type 3 </div>\n                    </Button>\n                    <p>This button is with small size, and primary color and other props</p>\n                </ButtonWrapperDiv>\n\n                <ButtonWrapperDiv>\n                    <Button>\n                        <div> type 4  </div>\n                    </Button>\n                    <p>This button is with no props just defautlt values</p>\n                </ButtonWrapperDiv>\n                <ButtonWrapperDiv>\n                    <Button onClick={handleOnClick} customStyle={style.__customStyles}>\n                        <div> type 5  </div>\n                    </Button>\n                    <p>This button is with only customStyles and onclick function</p>\n                </ButtonWrapperDiv>\n            </WrapperDiv>\n        </ContainerWrapper>\n\n    )\n};\nexport default ButtonLayout;","\nexport const __customStyles = {\n    backgroundColor: \"yellow\",\n    width: \"200px\"\n}\n\nexport const __wrapper = (props: any) => ({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n});\n\n\nexport const __buttonWrapper = (props: any) => ({\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: \" 40px 40px 0px 40px \",\n    alignItems: \"center\"\n});\n\n","import fonts from \"../../Comman/commanUtils/fonts\";\nimport colors from \"../../Comman/commanUtils/color\";\n\n\nexport const __themeSetter = (props: any) => ({\n    height: \"100vh\",\n    ...(props.isDark\n        ? {\n            backgroundColor: colors.blackThree,\n            color: colors.white,\n            transition: \"all 0.50s linear\",\n        }\n        : {\n            backgroundColor: colors.white,\n            color: colors.black,\n            transition: \"all 0.50s linear\"\n        })\n});\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainLayout from './Container/MainLayout/MainLayout';\n\nfunction App() {\n  return (\n    \n    <MainLayout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}